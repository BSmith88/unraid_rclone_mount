#!/bin/bash

#############################################################################
######################          Upload Script          ######################
######################            GUI Build            ######################
#############################################################################
#############################################################################
######################         Version 0.98.1          ######################
#############################################################################
#############################################################################
# INSTRUCTIONS                                                              #
# Make Sure to edit config settings to your prefernces                      #
#                                                                           #
# Script Config located at: /mnt/user/appdata/other/rclone/config.cfg       #
#                                                                           #
#############################################################################
#############################################################################
#####                                                                   #####
#####    DO NOT EDIT THIS SCRIPT UNLESS YOU KNOW WHAT YOU ARE DOING     #####
#####                                                                   #####
#############################################################################
#############################################################################
#############################################################################

######################  Load and Prep Config Variables  #####################

if [[ -f "mnt/user/appdata/other/rclone/config.cfg" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Found Config Files"
	else
		echo "$(date "+%d.%m.%Y %T") ERROR: No Config File found."
		echo "$(date "+%d.%m.%Y %T") ERROR: Please edit config file at /mnt/user/appdata/other/rclone/config.cfg."
		exit
fi

echo "$(date "+%d.%m.%Y %T") INFO: Loading Config File."

shopt -s extglob
configfile="/mnt/user/appdata/other/rclone/config.cfg" # set the actual path name of your (DOS or Unix) config file
tr -d '\r' < $configfile > $config.cfg
while IFS='= ' read -r lhs rhs
do
    if [[ ! $lhs =~ ^\ *# && -n $lhs ]]; then
        rhs="${rhs%%\#*}"    # Del in line right comments
        rhs="${rhs%%*( )}"   # Del trailing spaces
        rhs="${rhs%\"*}"     # Del opening string quotes 
        rhs="${rhs#\"*}"     # Del closing string quotes 
        declare $lhs="$rhs"
    fi
done < $config.cfg


######################  Prep Mount Location Variables  ######################
if [[  $BackupJob == 'Y' ]]; then
	LocalFilesLocation="$LocalFilesShare"
	echo "$(date "+%d.%m.%Y %T") INFO: *** Backup selected.  Files will be copied or synced from ${LocalFilesLocation} for ${RcloneUploadRemoteName} ***"
else
	LocalFilesLocation="$LocalFilesShare/$RcloneRemoteName"
	echo "$(date "+%d.%m.%Y %T") INFO: *** Rclone move selected.  Files will be moved from ${LocalFilesLocation} for ${RcloneUploadRemoteName} ***"
fi

RcloneMountLocation="$RcloneMountShare/$RcloneRemoteName" # Location of rclone mount

######################   Create Dir for Script Files   ######################
mkdir -p /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName

####################   Create Exclusion File for WebGUI  ####################
if [[  $Webgui == 'Y' ]]; then
	Excludepath="/mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/exclude.txt"
	if [[ -f /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/exclude.txt ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Exclude.txt file already present."
	else
		echo "$(date "+%d.%m.%Y %T") INFO: Adding exclude.txt file for mount."
		cat <<-EOF > /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/exclude.txt
		$Exclusionfilter1
		$Exclusionfilter2
		EOF
	fi
fi

###################### Check if Upload Already Running ######################
echo "$(date "+%d.%m.%Y %T") INFO: *** Starting rclone_upload script for ${RcloneUploadRemoteName} ***"
if [[ -f "/mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/upload_running$JobName" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Exiting as script already running."
	exit
else
	echo "$(date "+%d.%m.%Y %T") INFO: Script not running - proceeding."
	touch /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/upload_running$JobName
fi

######################  Check if Mount is Functioning  ######################
echo "$(date "+%d.%m.%Y %T") INFO: Checking if rclone installed successfully."
if [[ -f "$RcloneMountLocation/mountcheck" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: rclone installed successfully - proceeding with upload."
else
	echo "$(date "+%d.%m.%Y %T") INFO: rclone not installed - will try again later."
	rm /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/upload_running$JobName
	exit
fi

######################  Set Service Account Variables  ######################
if [[ $UseServiceAccountUpload == 'Y' ]]; then
	cd /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/
	CounterNumber=$(find -name 'counter*' | cut -c 11,12)
	CounterCheck="1"
	if [[ "$CounterNumber" -ge "$CounterCheck" ]];then
		echo "$(date "+%d.%m.%Y %T") INFO: Counter file found for ${RcloneUploadRemoteName}."
	else
		echo "$(date "+%d.%m.%Y %T") INFO: No counter file found for ${RcloneUploadRemoteName}. Creating counter_1."
		touch /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/counter_1
		CounterNumber="1"
	fi
	ServiceAccount="--drive-service-account-file=$ServiceAccountDirectory/$ServiceAccountFile$CounterNumber.json"
	ServiceAccountGUI="$ServiceAccountDirectory/$ServiceAccountFile$CounterNumber.json"
	echo "$(date "+%d.%m.%Y %T") INFO: Upload will occur using ${RcloneUploadRemoteName} remote with ${ServiceAccountFile}${CounterNumber}.json associated."
else
	echo "$(date "+%d.%m.%Y %T") INFO: Upload will occur using ${RcloneUploadRemoteName} remote"
	ServiceAccount=""
fi

######################     Set Delete Dir for Move     ######################

if [[  $RcloneCommand == 'move' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: *** Using rclone move command - will add attribute delete-empty-src-dirs to upload."
	if [[  $Webgui == 'Y' ]]; then
	DeleteEmpty="true"
	else
	DeleteEmpty="--delete-empty-src-dirs "
	fi
else
	echo "$(date "+%d.%m.%Y %T") INFO: *** Not using rclone move - will not issue delete-empty-src-dirs to upload"
	if [[  $Webgui == 'Y' ]]; then
	DeleteEmpty="false"
	else
	DeleteEmpty=""
	fi
fi

######################   Check for Backup Directory    ######################
if [[  $BackupJob == 'Y' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: *** Will backup to ${BackupRemoteLocation} and use  ${BackupRemoteDeletedLocation} as --backup-directory with ${BackupRetention} retention for ${RcloneUploadRemoteName}."
	LocalFilesLocation="$LocalFilesShare"
	BackupDir="--backup-dir $RcloneUploadRemoteName:$BackupRemoteDeletedLocation"
else
	BackupRemoteLocation=""
	BackupRemoteDeletedLocation=""
	BackupRetention=""
	BackupDir=""
fi

######################   Set Rclone WebGUI Variables   ######################
if [[  $Webgui == 'Y' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: *** WebGUI Enabled - Note this is still currently in beta and may have errors or issues associated with it"
	Webguicommands="--rc-user=$Webgui_Username --rc-pass=$Webgui_Password --rc-addr=$Webgui_Address"
		if [[ $UseServiceAccountUpload == 'Y' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Modifying ${ServiceAccountRemoteName} to utilize service account with ${ServiceAccountFile}${CounterNumber} as credentials"
			Uploadremote="$ServiceAccountCryptName:$BackupRemoteLocation"
			rclone rc $Webguicommands config/update --json '{"name": "'"$ServiceAccountRemoteName"'", "parameters": {"service_account_file": "'"$ServiceAccountGUI"'"}}'
		else
		Uploadremote="$RcloneUploadRemoteName:$BackupRemoteLocation"
		fi
	echo "$(date "+%d.%m.%Y %T") INFO: Modifying GLOBAL RC Flags for Upload Settings"
	rclone rc $Webguicommands options/set --json '{"filter": {"ExcludeFrom": ["'"$Excludepath"'"]}}'
	rclone rc $Webguicommands options/set --json '{"filter": {"MinAge":900000000000}}'
	RcloneCommandRC="sync/$RcloneCommand"
	CreateBindMount_upload="N"
fi

######################      Check Binding Options      ######################
if [[  $CreateBindMount_upload == 'Y' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: *** Checking if IP address ${RCloneMountIP_upload} already created for upload to remote ${RcloneUploadRemoteName}"
	ping -q -c2 $RCloneMountIP_upload > /dev/null # -q quiet, -c number of pings to perform
	if [ $? -eq 0 ]; then # ping returns exit status 0 if successful
		echo "$(date "+%d.%m.%Y %T") INFO: *** IP address ${RCloneMountIP_upload} already created for upload to remote ${RcloneUploadRemoteName}"
	else
		echo "$(date "+%d.%m.%Y %T") INFO: *** Creating IP address ${RCloneMountIP_upload} for upload to remote ${RcloneUploadRemoteName}"
		ip addr add $RCloneMountIP_upload/24 dev $NetworkAdapter_upload label $NetworkAdapter_upload:$VirtualIPNumber_upload
	fi
else
	RCloneMountIP_upload=""
fi

######################     Rclone Upload Commands      ###################### 
if [[  $Webgui == 'Y' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Uploading through RC with WebGUI Enabled"
	rclone rc $Webguicommands \
	$RcloneCommandRC \
	--json '{"srcFs":"'"$LocalFilesLocation"'", "dstFs":"'"$Uploadremote"'", "deleteEmptySrcDirs":"'"$DeleteEmpty"'", "_async": true, "_group":"upload"}'
else
	echo "$(date "+%d.%m.%Y %T") INFO: Uploading With WebGUI Disabled"
	rclone $RcloneCommand $LocalFilesLocation $RcloneUploadRemoteName:$BackupRemoteLocation $ServiceAccount $BackupDir -vP \
	--user-agent="$RcloneUploadRemoteName" \
	--buffer-size 512M \
	--drive-chunk-size 512M \
	--stats 9999m \
	--use-mmap \
	--tpslimit 8 \
	--checkers 8 \
	--transfers 4 \
	--order-by modtime,$ModSort \
	--min-age $MinimumAge \
	$Command1_upload $Command2_upload $Command3_upload $Command4_upload $Command5_upload $Command6_upload $Command7_upload $Command8_upload \
	--exclude *fuse_hidden* \
	--exclude *_HIDDEN \
	--exclude .recycle** \
	--exclude .Recycle.Bin/** \
	--exclude *.backup~* \
	--exclude *.partial~* \
	--drive-stop-on-upload-limit \
	--bwlimit "${BWLimit1Time},${BWLimit1} ${BWLimit2Time},${BWLimit2} ${BWLimit3Time},${BWLimit3}" \
	--bind=$RCloneMountIP_upload $DeleteEmpty
fi
 

######################   Delete old files from mount   ######################
if [[  $UseBackupDirectory == 'Y' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: *** Removing files older than ${BackupRetention} from ${BackupDirectoryLocation} for ${RcloneUploadRemoteName}."
	rclone delete --min-age $BackupRetention $RcloneUploadRemoteName:$BackupRemoteDeletedLocation
fi

#############################################################################
######################       Update Counter File       ######################
######################     Clean-up and Final Tasks    ######################
#############################################################################


####################   Sleep for upload initiation time  ####################
sleep 15

######################   Monitor for RC Upload Finish  ######################
if [[  $Webgui == 'Y' ]]; then
    rc_job_status=$(
	rclone rc $Webguicommands --json '{ "group": "upload" }' core/stats
	)
for (( ; ; )); do
   if [[ $rc_job_status != *transferring* ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Upload job has finished"
        break
   else
	echo "$(date "+%d.%m.%Y %T") INFO: Upload job is still in progress - will recheck in 1 minute"
        sleep 60
        rc_job_status=$(
	rclone rc $Webguicommands --json '{ "group": "upload" }' core/stats
	)
	continue
   fi
done
fi

###################### Modify Service Accounts Counter ######################
if [[  $UseServiceAccountUpload == 'Y' ]]; then
	if [[ "$CounterNumber" == "$CountServiceAccounts" ]];then
		rm /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/counter_*
		touch /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/counter_1
		echo "$(date "+%d.%m.%Y %T") INFO: Final counter used - resetting loop and created counter_1."
	else
		rm /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/counter_*
		CounterNumber=$((CounterNumber+1))
		touch /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/counter_$CounterNumber
		echo "$(date "+%d.%m.%Y %T") INFO: Created counter_${CounterNumber} for next upload run."
	fi
else
	echo "$(date "+%d.%m.%Y %T") INFO: Not utilising service accounts."
fi

rm /mnt/user/appdata/other/rclone/remotes/$RcloneUploadRemoteName/upload_running$JobName
echo "$(date "+%d.%m.%Y %T") INFO: Script complete"

exit