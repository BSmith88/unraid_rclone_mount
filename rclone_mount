#!/bin/bash
#############################################################################
######################           Mount Script          ######################
######################            GUI Build            ######################
#############################################################################
#############################################################################
######################         Version 0.98.1          ######################
#############################################################################
#############################################################################
#############################################################################
#                               INSTRUCTIONS                                #
#           Make Sure to edit config settings to your prefernces            #
#                                                                           #
#    Script Config located at: /mnt/user/appdata/other/rclone/config.cfg    #
#                                                                           #
#    If config.cfg not present script will automatically create             #
#    a config file for you to edit                                          #
#                                                                           #
#    If you need to change the config_file or path feel free below          #
#    (Eg. Multiple mount/upload scripts running)                            #
#                                                                           #
#              Otherwise, no need to edit this script                       #
#############################################################################
#############################################################################


configfile="/mnt/user/appdata/other/rclone/config.cfg" #Leave as default unless you need to run multiple configs. Example - multiple mount/upload scripts



#############################################################################
#############################################################################
#####                                                                   #####
#####    DO NOT EDIT THIS SCRIPT UNLESS YOU KNOW WHAT YOU ARE DOING     #####
#####                                                                   #####
#############################################################################
#############################################################################
#############################################################################

######################  Load and Prep Config Variables  #####################

if [[ -f "$configfile" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Found Config Files"
	else
		mkdir -p /mnt/user/appdata/other/rclone/
		wget https://raw.githubusercontent.com/watchmeexplode5/unraid_rclone_mount/rclone-beta-gui/config.cfg -P /mnt/user/appdata/other/rclone/
		echo "$(date "+%d.%m.%Y %T") ERROR: No Config File found."
		echo "$(date "+%d.%m.%Y %T") ERROR: Please edit config file at /mnt/user/appdata/other/rclone/config.cfg."
		exit
fi

echo "$(date "+%d.%m.%Y %T") INFO: Loading Config File."

shopt -s extglob
tr -d '\r' < $configfile > $config.cfg
while IFS='= ' read -r lhs rhs
do
    if [[ ! $lhs =~ ^\ *# && -n $lhs ]]; then
        rhs="${rhs%%\#*}"    # Del in line right comments
        rhs="${rhs%%*( )}"   # Del trailing spaces
        rhs="${rhs%\"*}"     # Del opening string quotes 
        rhs="${rhs#\"*}"     # Del closing string quotes 
        declare $lhs="$rhs"
    fi
done < $config.cfg


######################  Prep Mount Location Variables  ######################
LocalFilesLocation="$LocalFilesShare/$RcloneRemoteName" # Location for local files to be merged with rclone mount
RcloneMountLocation="$RcloneMountShare/$RcloneRemoteName" # Location for rclone mount
MergerFSMountLocation="$MergerfsMountShare/$RcloneRemoteName" # Rclone data folder location

######################   Create Dir for Script Files   ######################
mkdir -p /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName #for script files
if [[  $LocalFileShare == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating local folders as requested."
else
	echo "$(date "+%d.%m.%Y %T") INFO: Creating local folders."
	eval mkdir -p $LocalFilesLocation/$MountFolders
fi
mkdir -p $RcloneMountLocation
mkdir -p $MergerFSMountLocation
###################### Check if Upload Already Running ######################
echo "$(date "+%d.%m.%Y %T") INFO: *** Starting mount of remote ${RcloneRemoteName}"
echo "$(date "+%d.%m.%Y %T") INFO: Checking if this script is already running."
if [[ -f "/mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Exiting script as already running."
	exit
else
	echo "$(date "+%d.%m.%Y %T") INFO: Script not running - proceeding."
	touch /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
fi

######################    Check if Already Mounted     ######################
	if [[ -f "$RcloneMountLocation/mountcheck" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Success ${RcloneRemoteName} remote is already mounted."
	else
		echo "$(date "+%d.%m.%Y %T") INFO: Mount not running. Will now mount ${RcloneRemoteName} remote."
	
######################  Create mountcheck if Missing   ######################
	echo "$(date "+%d.%m.%Y %T") INFO: Recreating mountcheck file for ${RcloneRemoteName} remote."
	touch mountcheck
	rclone copy mountcheck $RcloneRemoteName: -vv --no-traverse

######################  Setup Rclone WebGui Variables  ######################
if [[  $Webgui == 'Y' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: *** WebGUI Enabled - Note this is still currently in beta and may have errors or issues associated with it"
	Webguicommands="--rc --rc-web-gui --rc-user $Webgui_Username --rc-pass $Webgui_Password	--rc-addr $Webgui_Address --rc-web-gui-update"
	CreateBindMount="N"
else
	echo "$(date "+%d.%m.%Y %T") INFO: *** WebGUI Not Enabled"
	Webguicommands=""
fi
 
######################      Check Binding Options      ######################
	if [[  $CreateBindMount_mount == 'Y' ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: *** Checking if IP address ${RCloneMountIP_mount} already created for remote ${RcloneRemoteName}"
		ping -q -c2 $RCloneMountIP_mount > /dev/null # -q quiet, -c number of pings to perform
		if [ $? -eq 0 ]; then # ping returns exit status 0 if successful
			echo "$(date "+%d.%m.%Y %T") INFO: *** IP address ${RCloneMountIP_mount} already created for remote ${RcloneRemoteName}"
		else
			echo "$(date "+%d.%m.%Y %T") INFO: *** Creating IP address ${RCloneMountIP_mount} for remote ${RcloneRemoteName}"
			ip addr add $RCloneMountIP_mount/24 dev $NetworkAdapter_mount label $NetworkAdapter_mount:$VirtualIPNumber_mount
		fi
		echo "$(date "+%d.%m.%Y %T") INFO: *** Created bind mount ${RCloneMountIP_mount} for remote ${RcloneRemoteName}"
	else
		RCloneMountIP_mount=""
		echo "$(date "+%d.%m.%Y %T") INFO: *** Creating mount for remote ${RcloneRemoteName}"
	fi

######################       Create Rclone Mount       ######################
	rclone mount \
	$Webguicommands \
	$Command1_mount $Command2_mount $Command3_mount $Command4_mount $Command5_mount $Command6_mount $Command7_mount $Command8_mount \
	--allow-other \
	--buffer-size 256M \
	--dir-cache-time 720h \
	--drive-chunk-size 512M \
	--log-level $loglevel \
	--vfs-read-chunk-size 128M \
	--poll-interval 30s \
	--vfs-read-chunk-size-limit off \
	--vfs-cache-mode writes \
	--bind=$RCloneMountIP_mount \
	$RcloneRemoteName: $RcloneMountLocation &

######################           Check Mount           ######################
	echo "$(date "+%d.%m.%Y %T") INFO: sleeping for 5 seconds"
	sleep 5
	echo "$(date "+%d.%m.%Y %T") INFO: continuing..."
	if [[ -f "$RcloneMountLocation/mountcheck" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Successful mount of ${RcloneRemoteName} mount."
	else
		echo "$(date "+%d.%m.%Y %T") CRITICAL: ${RcloneRemoteName} mount failed - please check for problems."
		rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
		exit
	fi
fi

######################      Start MergerFS Mount       ######################
if [[  $MergerfsMountShare == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating mergerfs mount as requested."
else
	if [[ -f "$MergerFSMountLocation/mountcheck" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Check successful, ${RcloneRemoteName} mergerfs mount in place."
	else
# check if mergerfs already installed
		if [[ -f "/bin/mergerfs" ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs already installed, proceeding to create mergerfs mount"
		else
# Build mergerfs binary
			echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs not installed - installing now."
			mkdir -p /mnt/user/appdata/other/rclone/mergerfs
			docker run -v /mnt/user/appdata/other/rclone/mergerfs:/build --rm trapexit/mergerfs-static-build
			mv /mnt/user/appdata/other/rclone/mergerfs/mergerfs /bin
# check if mergerfs install successful
			echo "$(date "+%d.%m.%Y %T") INFO: *sleeping for 5 seconds"
			sleep 5
			if [[ -f "/bin/mergerfs" ]]; then
				echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs installed successfully, proceeding to create mergerfs mount."
			else
				echo "$(date "+%d.%m.%Y %T") ERROR: Mergerfs not installed successfully.  Please check for errors.  Exiting."
				rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
				exit
			fi
		fi
# Create mergerfs mount
		echo "$(date "+%d.%m.%Y %T") INFO: Creating ${RcloneRemoteName} mergerfs mount."
# Extra Mergerfs folders and Additional Mounts
		if [[  $LocalFilesShare2 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFilesShare2} to ${RcloneRemoteName} mergerfs mount."
			LocalFilesShare2=":$LocalFilesShare2"
		else
			LocalFilesShare2=""
		fi
		if [[  $LocalFilesShare3 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFilesShare3} to ${RcloneRemoteName} mergerfs mount."
			LocalFilesShare3=":$LocalFilesShare3"
		else
			LocalFilesShare3=""
		fi
		if [[  $LocalFilesShare4 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFilesShare4} to ${RcloneRemoteName} mergerfs mount."
			LocalFilesShare4=":$LocalFilesShare4"
		else
			LocalFilesShare4=""
		fi
# mergerfs mount command
		mergerfs $LocalFilesLocation:$RcloneMountLocation$LocalFilesShare2$LocalFilesShare3$LocalFilesShare4 $MergerFSMountLocation -o rw,async_read=false,use_ino,allow_other,func.getattr=newest,category.action=all,category.create=ff,cache.files=partial,dropcacheonclose=true
# check if mergerfs mount successful
		echo "$(date "+%d.%m.%Y %T") INFO: Checking if ${RcloneRemoteName} mergerfs mount created."
		if [[ -f "$MergerFSMountLocation/mountcheck" ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Check successful, ${RcloneRemoteName} mergerfs mount created."
		else
			echo "$(date "+%d.%m.%Y %T") CRITICAL: ${RcloneRemoteName} mergerfs mount failed."
			rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
			exit
		fi
	fi
fi

######################          Start Dockers          ######################
if [[ -f "/mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/dockers_started" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: dockers already started."
else
	touch /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/dockers_started
	echo "$(date "+%d.%m.%Y %T") INFO: Starting dockers."
	docker start $DockerStart
fi

######################            Clean-Up             ######################
rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
echo "$(date "+%d.%m.%Y %T") INFO: Script complete"

exit