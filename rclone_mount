#!/bin/bash
#############################################################################
######################           Mount Script          ######################
######################            GUI Build            ######################
#############################################################################
#############################################################################
######################         Version 0.97.0          ######################
#############################################################################
#############################################################################
#############################################################################
# INSTRUCTIONS                                                              #
# Edit the settings below to match your setup                               #
# NOTE: Enter Remote Names WITHOUT ':'                                      #
# Optional: Add additional commands or filters                              #
# Optional: Use bind mount settings for potential traffic shaping           #
# Optional: Use service accounts in your upload remote                      #
# Optional: Include custom command and bind mount settings                  #
# Optional: Utilize Beta WebGUI. Note - This may still be prone to errors   #
#############################################################################


#############################################################################
########################          ----------          #######################
########################      Required Settings       #######################
########################          ----------          #######################
#############################################################################

RcloneRemoteName="gcrypt" # Name of rclone remote mount WITHOUT ':'. NOTE: Choose your encrypted remote for sensitive data
RcloneMountShare="/mnt/user/mount_rclone" # where your rclone remote will be located without trailing slash  e.g. /mnt/user/mount_rclone
MergerfsMountShare="/mnt/user/mount_mergerfs" # location without trailing slash  e.g. /mnt/user/mount_mergerfs. Enter 'ignore' to disable
DockerStart="" # list of dockers, separated by space, to start once mergerfs mount verified. Remember to disable AUTOSTART for dockers added in docker settings page
LocalFilesShare="/mnt/user/local" # location of the local files and MountFolders you want to upload without trailing slash to rclone e.g. /mnt/user/local. Enter 'ignore' to disable
MountFolders=\{"downloads/complete,downloads/intermediate,downloads/seeds,movies,tv"\} # comma separated list of folders to create within the mount

#############################################################################
########################          ----------          #######################
########################      Optional Settings       #######################
########################          ----------          #######################
#############################################################################

#############################################################################
########                Extra Paths to MergerFS Mount                ########
########                         ------------                        ########
########  Add Without Trailing Slash (/mnt/..../other_local_folder   ########
########                  Enter 'ignore' to disable                  ########
#############################################################################

LocalFilesShare2="ignore" 
LocalFilesShare3="ignore"
LocalFilesShare4="ignore"

#############################################################################
###################         Custom Rclone Commands        ###################
################### **Not Applicable with Rclone WebGUI** ###################
#############################################################################

Command1="" #Examples: "/mnt/user/appdata/other/rclone/.rclone.conf"
Command2=""
Command3=""
Command4=""
Command5=""
Command6=""
Command7=""
Command8=""

#############################################################################
##########                    Use Beta WebGUI                       #########
##########   Settings for GUI must match settings in Upload script  #########
#############################################################################

Webgui="Y" # Y/N. Choose whether to enable rclones beta web-gui
Webgui_Username="USERNAME" # Username for WebGUI
Webgui_Password="PASSWORD" # Password for WebGUI
Webgui_Address=":5572" #IP:Port for your local webGUI. Default ":5572" will host WebGUI at http://Unraid's-IP:5572

#############################################################################
######################    Bind Mount to Unique IP      ######################
#############################################################################

CreateBindMount="N" # Y/N. Choose whether to bind traffic to a particular network adapter
RCloneMountIP="192.168.1.252" # My unraid IP is 172.30.12.2 so I create another similar IP address
NetworkAdapter="eth0" # choose your network adapter. eth0 recommended
VirtualIPNumber="2" # creates eth0:x e.g. eth0:1.  I create a unique virtual IP addresses for each mount & upload so I can monitor and traffic shape for each of them

#############################################################################
##########              Additional MergerFs **Mounts**              #########
##########       (Don't confuse with extra file paths above)        #########
#############################################################################

#############################################################################
#   Use case for me - allows multiple instances of Sonarr/Radarr to handle  #
#                 each quality (ie /movies_1080, /movies_4k)                #
#                    ----------------------------------_                    #
#       Plex/Emby only sees a single folder structure so the player can     #
#          determine the best directplay/transcode option on a client       #
#                    ----------------------------------_                    #
#              Sonarr/Radar folder naming schemes to be identical           #
#                    ----------------------------------_                    #                                                                           #
#                    ----------------------------------_                    #  
# Ex: ./mount_merger_fs/gcrypt/movies_1080/Movie Name/Movie Remux-1080p.mkv #
# Ex: ./mount_merger_fs/gcrypt/movies_4k/Movie Name/Movie Remux-2160p.mkv   #
#                                                                           #
# Plex will see: /combined_media/movies/The Movie (2020)/                   #
#                               Movie - Remux-1080p.mkv                     #
#                               Movie - Remux-2160p.mkv                     #
#############################################################################

Additional_Mount1_location="ignore" #Ignore to disable function. Ex: "/mnt/user/combined_media/movies"
Write1_properties="ro" #Default: "ro" --> read-only. Nothing should need to write this drive in most cases. Options: ro/rw
Mount1_merge_dir1="" # First directory to merge. Ex: "/mnt/user/mount_mergerfs/gcrypt/movies/"  --> Where "gcrypt" is your rcloneremotename above. Blank to disable. 
Mount1_merge_dir2="" # Second directory to merge. Ex: "/mnt/user/mount_mergerfs/gcrypt/movies\ 4k/". Blank to disable
Mount1_merge_dir3="" # Blank to disable
Mount1_merge_dir4="" # Blank to disable

Additional_Mount2_location="ignore" #Ignore to disable function. Ex: "/mnt/user/combined_media/tv"
Write2_properties="ro" #Default: "ro" --> read-only. Nothing should need to write this drive in most cases. Options: ro/rw
Mount2_merge_dir1="" # Ex. "/mnt/user/mount_mergerfs/gcrypt/tv/". Blank to disable
Mount2_merge_dir2="" # Ex. "/mnt/user/mount_mergerfs/gcrypt/tv\ 4k/"
Mount2_merge_dir3="" # Blank to disable
Mount2_merge_dir4="" # Blank to disable

#Advanced merger_fs options, modify for special use, otherwise leave as default.
adv_options="async_read=false,use_ino,allow_other,func.getattr=newest,category.action=all,category.create=ff,cache.files=off,dropcacheonclose=true" 

#############################################################################
#############################################################################
#####                                                                   #####
#####                          -------------                            #####
#####                       END OF USER SETTINGS                        #####
#####                          -------------                            #####
#####                                                                   #####
#####  DO NOT EDIT BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING   #####
#############################################################################
#############################################################################
#############################################################################

######################  Prep Mount Location Variables  ######################
LocalFilesLocation="$LocalFilesShare/$RcloneRemoteName" # Location for local files to be merged with rclone mount
RcloneMountLocation="$RcloneMountShare/$RcloneRemoteName" # Location for rclone mount
MergerFSMountLocation="$MergerfsMountShare/$RcloneRemoteName" # Rclone data folder location

######################   Create Dir for Script Files   ######################
mkdir -p /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName #for script files
if [[  $LocalFileShare == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating local folders as requested."
else
	echo "$(date "+%d.%m.%Y %T") INFO: Creating local folders."
	eval mkdir -p $LocalFilesLocation/"$MountFolders"
fi
mkdir -p $RcloneMountLocation
mkdir -p $MergerFSMountLocation

if [[  $Additional_Mount1_location == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating additional mergerfs mount shares as requested."
else
	echo "$(date "+%d.%m.%Y %T") INFO: Creating additional mergerfs mount shares."
	mkdir -p $Additional_Mount1_location
fi

if [[  $Additional_Mount2_location == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating second additional mergerfs mount shares as requested."
else
	echo "$(date "+%d.%m.%Y %T") INFO: Creating second additional mergerfs mount shares."
	mkdir -p $Additional_Mount2_location
fi

###################### Check if Upload Already Running ######################
echo "$(date "+%d.%m.%Y %T") INFO: *** Starting mount of remote ${RcloneRemoteName}"
echo "$(date "+%d.%m.%Y %T") INFO: Checking if this script is already running."
if [[ -f "/mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Exiting script as already running."
	exit
else
	echo "$(date "+%d.%m.%Y %T") INFO: Script not running - proceeding."
	touch /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
fi

######################    Check if Already Mounted     ######################
	if [[ -f "$RcloneMountLocation/mountcheck" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Success ${RcloneRemoteName} remote is already mounted."
	else
		echo "$(date "+%d.%m.%Y %T") INFO: Mount not running. Will now mount ${RcloneRemoteName} remote."
	
######################  Create mountcheck if Missing   ######################
	echo "$(date "+%d.%m.%Y %T") INFO: Recreating mountcheck file for ${RcloneRemoteName} remote."
	touch mountcheck
	rclone copy mountcheck $RcloneRemoteName: -vv --no-traverse

######################  Setup Rclone WebGui Variables  ######################
if [[  $Webgui == 'Y' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: *** WebGUI Enabled - Note this is still currently in beta and may have errors or issues associated with it"
	Webguicommands="--rc --rc-web-gui --rc-user $Webgui_Username --rc-pass $Webgui_Password	--rc-addr $Webgui_Address --rc-web-gui-update"
	CreateBindMount="N"
else
	echo "$(date "+%d.%m.%Y %T") INFO: *** WebGUI Not Enabled"
	Webguicommands=""
fi
 
######################      Check Binding Options      ######################
	if [[  $CreateBindMount == 'Y' ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: *** Checking if IP address ${RCloneMountIP} already created for remote ${RcloneRemoteName}"
		ping -q -c2 $RCloneMountIP > /dev/null # -q quiet, -c number of pings to perform
		if [ $? -eq 0 ]; then # ping returns exit status 0 if successful
			echo "$(date "+%d.%m.%Y %T") INFO: *** IP address ${RCloneMountIP} already created for remote ${RcloneRemoteName}"
		else
			echo "$(date "+%d.%m.%Y %T") INFO: *** Creating IP address ${RCloneMountIP} for remote ${RcloneRemoteName}"
			ip addr add $RCloneMountIP/24 dev $NetworkAdapter label $NetworkAdapter:$VirtualIPNumber
		fi
		echo "$(date "+%d.%m.%Y %T") INFO: *** Created bind mount ${RCloneMountIP} for remote ${RcloneRemoteName}"
	else
		RCloneMountIP=""
		echo "$(date "+%d.%m.%Y %T") INFO: *** Creating mount for remote ${RcloneRemoteName}"
	fi

######################       Create Rclone Mount       ######################
	rclone mount \
	$Webguicommands \
	$Command1 $Command2 $Command3 $Command4 $Command5 $Command6 $Command7 $Command8 \
	--allow-other \
	--buffer-size 256M \
	--dir-cache-time 720h \
	--drive-chunk-size 512M \
	--log-level INFO \
	--vfs-read-chunk-size 128M \
	--poll-interval 30s \
	--vfs-read-chunk-size-limit off \
	--vfs-cache-mode writes \
	--bind=$RCloneMountIP \
	$RcloneRemoteName: $RcloneMountLocation &

######################           Check Mount           ######################
	echo "$(date "+%d.%m.%Y %T") INFO: sleeping for 5 seconds"
	sleep 5
	echo "$(date "+%d.%m.%Y %T") INFO: continuing..."
	if [[ -f "$RcloneMountLocation/mountcheck" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Successful mount of ${RcloneRemoteName} mount."
	else
		echo "$(date "+%d.%m.%Y %T") CRITICAL: ${RcloneRemoteName} mount failed - please check for problems."
		rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
		exit
	fi
fi

######################      Start MergerFS Mount       ######################
if [[  $MergerfsMountShare == 'ignore' ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: Not creating mergerfs mount as requested."
else
	if [[ -f "$MergerFSMountLocation/mountcheck" ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Check successful, ${RcloneRemoteName} mergerfs mount in place."
	else
# check if mergerfs already installed
		if [[ -f "/bin/mergerfs" ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs already installed, proceeding to create mergerfs mount"
		else
# Build mergerfs binary
			echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs not installed - installing now."
			mkdir -p /mnt/user/appdata/other/rclone/mergerfs
			docker run -v /mnt/user/appdata/other/rclone/mergerfs:/build --rm trapexit/mergerfs-static-build
			mv /mnt/user/appdata/other/rclone/mergerfs/mergerfs /bin
# check if mergerfs install successful
			echo "$(date "+%d.%m.%Y %T") INFO: *sleeping for 5 seconds"
			sleep 5
			if [[ -f "/bin/mergerfs" ]]; then
				echo "$(date "+%d.%m.%Y %T") INFO: Mergerfs installed successfully, proceeding to create mergerfs mount."
			else
				echo "$(date "+%d.%m.%Y %T") ERROR: Mergerfs not installed successfully.  Please check for errors.  Exiting."
				rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
				exit
			fi
		fi
# Create mergerfs mount
		echo "$(date "+%d.%m.%Y %T") INFO: Creating ${RcloneRemoteName} mergerfs mount."
# Extra Mergerfs folders and Additional Mounts
		if [[  $LocalFilesShare2 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFilesShare2} to ${RcloneRemoteName} mergerfs mount."
			LocalFilesShare2=":$LocalFilesShare2"
		else
			LocalFilesShare2=""
		fi
		if [[  $LocalFilesShare3 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFilesShare3} to ${RcloneRemoteName} mergerfs mount."
			LocalFilesShare3=":$LocalFilesShare3"
		else
			LocalFilesShare3=""
		fi
		if [[  $LocalFilesShare4 != 'ignore' ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Adding ${LocalFilesShare4} to ${RcloneRemoteName} mergerfs mount."
			LocalFilesShare4=":$LocalFilesShare4"
		else
			LocalFilesShare4=""
		fi
		if [[  $Mount1_merge_dir3 != 'ignore' ]]; then
			Mount1_merge_dir3=":$Mount1_merge_dir3"
		else
			Mount1_merge_dir3=""
		fi
		if [[  $Mount1_merge_dir4 != 'ignore' ]]; then
			Mount1_merge_dir4=":$Mount1_merge_dir4"
		else
			Mount1_merge_dir4=""
		fi
		if [[  $Mount2_merge_dir3 != 'ignore' ]]; then
			Mount2_merge_dir3=":$Mount2_merge_dir3"
		else
			Mount2_merge_dir3=""
		fi
		if [[  $Mount2_merge_dir4 != 'ignore' ]]; then
			Mount2_merge_dir4=":$Mount2_merge_dir4"
		else
			Mount2_merge_dir4=""
		fi
# mergerfs mount command
		mergerfs $LocalFilesLocation:$RcloneMountLocation$LocalFilesShare2$LocalFilesShare3$LocalFilesShare4 $MergerFSMountLocation -o rw,async_read=false,use_ino,allow_other,func.getattr=newest,category.action=all,category.create=ff,cache.files=partial,dropcacheonclose=true
		
# Additional mergerfs mount command
	if [[  $Additional_Mount1_location != 'ignore' ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Running Additional mergerfs command."
		mergerfs $Mount1_merge_dir1:$Mount1_merge_dir2$Mount1_merge_dir3$Mount1_merge_dir4 $Additional_Mount1_location -o $Write1_properties,$adv_options
		else
	fi
	
	if [[  $Additional_Mount2_location != 'ignore' ]]; then
		echo "$(date "+%d.%m.%Y %T") INFO: Running Additional mergerfs command."
		mergerfs $Mount2_merge_dir1:$Mount2_merge_dir2$Mount2_merge_dir3$Mount2_merge_dir4 $Additional_Mount2_location -o $Write2_properties,$adv_options
		else
	fi

# check if mergerfs mount successful
		echo "$(date "+%d.%m.%Y %T") INFO: Checking if ${RcloneRemoteName} mergerfs mount created."
		if [[ -f "$MergerFSMountLocation/mountcheck" ]]; then
			echo "$(date "+%d.%m.%Y %T") INFO: Check successful, ${RcloneRemoteName} mergerfs mount created."
		else
			echo "$(date "+%d.%m.%Y %T") CRITICAL: ${RcloneRemoteName} mergerfs mount failed."
			rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
			exit
		fi
	fi
fi

######################          Start Dockers          ######################
if [[ -f "/mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/dockers_started" ]]; then
	echo "$(date "+%d.%m.%Y %T") INFO: dockers already started."
else
	touch /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/dockers_started
	echo "$(date "+%d.%m.%Y %T") INFO: Starting dockers."
	docker start $DockerStart
fi

######################            Clean-Up             ######################
rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/mount_running
echo "$(date "+%d.%m.%Y %T") INFO: Script complete"

exit